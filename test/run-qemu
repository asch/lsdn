#!/bin/bash
set -u

function syntax
{
   echo "usage: run-qemu [--help] [--kvm] [--gdb] kernel rootfs guest-command"
   echo 
   echo "Available guest commands: shell, raw-shell, all."
   echo "Unrecognized commands are passed to ./run test harness."
}

function help
{
   syntax

   cat <<EOT
To use this script, you will need to prepare following components:

1) kernel
   Compile a kernel and provide a path to the resulting bzImage 
   (usually in arch/x86_64/boot/bzImage).

   The kernel needs to have the following configuration options built-in:
    CONFIG_NET_9P
    CONFIG_NET_9P_VIRTIO
    CONFIG_9P_FS
    CONFIG_VIRTIO_BLK 
   Also enable most networking config options: network namespaces, bridges, VXLANs, VLANs and so on.

   Or just use the  x64 .config in lsdn/test/qemu/example.config :).

2) rootfs
   Path to the directory where the root filesystem resides in the form
   of simple file tree. No drive image.
   The rootfs must contain bash, glibc, iproute and cmake. Currently 
   tested with ArchLinux root file sytem.

   The file qemu/lsdn-guest-init must be placed in the root directory
   of this filesystem for automatic bootstrap.

   You can use create_rootfs.sh script for this. Of course, you are using ArchLinux.
EOT
	exit 0
}

QUIET="quiet"
KVM=""
GDB="-s"

while [[ ${1:-} == --* ]]; do
	case $1 in
		--help)
			help
			;;
		--kvm)
			KVM="--enable-kvm"
			;;
		--gdb)
			GDB="-s"
			;;
		*)
			echo "Unknown argument $1"
			echo
			syntax 
			exit 1
	esac
	shift
done

if [ $# -lt 3 ]; then
	echo "Missing required arguments"
	echo 
	syntax
	exit 1
fi

KERNEL=$1; shift
ROOTFS=$1; shift
QEMU=qemu-system-x86_64
SHELL=/bin/bash
INIT="$SHELL /lsdn-guest-init qemu/prepare-guest-env"
SHELL="/bin/bash"
CMDLINE=""
RESULT=""

case $1 in
	raw-shell)
		INIT="$SHELL"
		;;
	shell)
		CMDLINE="qemu/serial-shell"
		;;
	all)
		CMDLINE='ctest --output-on-failure'
		RESULT="ctest.result"
		;;
	*)
		CMDLINE="./run $*"
		;;
esac

echo "$CMDLINE" > qemu/work

"$QEMU" -kernel "$KERNEL" -m 256\
	-fsdev local,id=rootfs,path=${ROOTFS},security_model=none \
	-device virtio-9p-pci,fsdev=rootfs,mount_tag=/dev/root \
	-virtfs local,mount_tag=build,path=..,security_model=none \
	-serial mon:stdio  -nographic \
	$KVM $GDB \
	-append "
		root=/dev/root rw rootfstype=9p
		rootflags=cache=fscache,trans=virtio,version=9p2000.L
		$QUIET console=ttyS0 init=$INIT"

if [ ! -z "${RESULT}" ] ; then
	ret=1
	if [ -f "${RESULT}" ] ; then
		ret=`cat "${RESULT}"`
	fi
	exit $ret
fi
